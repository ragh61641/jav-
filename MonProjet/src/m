import java.awt.List;
import java.util.ArrayList;
import java.util.Scanner;

import mrjack.JetonAction;
import mrjack.Plateau;

public class MainMrjack {
	private static Scanner scanner = new Scanner(System.in);

	public static void main(String[] args) {
		Plateau plateau = new Plateau();
		int nb ;
		ArrayList<Jeton> jetons = new ArrayList<Jeton>(); // je cree une liste des jetons 
		ArrayList<Player> players = new ArrayList<Player>() ;
		
		
		Player joueur1 = new Player("Mr Jack");
		Player joueur2 = new Player("Mr Detctive");
		
		players.add(0,joueur2);
		players.add(1,joueur1);
		
		Jeton jeton1 = new Jeton("Holmes","Alibi");
		Jeton jeton2 = new Jeton("1Rotation","Echange");
		Jeton jeton3 = new Jeton("2Rotation","Joker");
		Jeton jeton4= new Jeton("Watson","TobyleChien");
		
		
		
		///add
		for (int nbTour = 1 ; nbTour <= 8 ; nbTour++) {
			jetons.add(jeton1);
			jetons.add(jeton2);
			jetons.add(jeton3);
			jetons.add(jeton4);
			
			plateau.temporary = -1;
			
			if (nbTour % 2 == 1) // impair // car le detective est celui qui jette les jetons sur la table
				                    // prend un jeton parmi listes des jetons et , le random de sa face
			                  lancerJetons(jetons);
			
			else // pair
				
					          changerjetons(jetons)          ;// a mr jack de changer les faces jouer dans le tour d'avant 
			int numeroJoueur=nbTour% 2;

			System.out.println("C'est au tour de " + players.get(numeroJoueur)
					+ ", voici les jetons actions :");
			for (int i = 0 ; i < 4 ; i++) {
				if (jetons.get(i).getPositionjeton() == 0)
					System.out.println(i + " : " + jetons.get(i).getPile());
				else
					System.out.println(i + " : " + jetons.get(i).getFace());
			}
			nb = -1;
			System.out.println("veuillez taper de 0 a 3 pour choisir l'action a jouer");
			while (nb != 0 && nb != 1 && nb != 2 && nb != 3) {
				nb = scanner.nextInt();
				if (nb != 0 && nb != 1 && nb != 2 && nb != 3)
					System.out.println("Veuillez retaper un chiffre de 0 a 3:");
			}
			jetons.get(nb).actionjeton(plateau);
			
			jetons.remove(jetons.get(nb));
			
			if (numeroJoueur==0 ) 
				numeroJoueur=1;
			else 
				numeroJoueur=0;
			
			System.out.println("C'est au tour de " + players.get(numeroJoueur)
					+ ", voici les jetons actions :");
			for (int i = 0 ; i < 3 ; i++) {
				if (jetons.get(i).getPositionjeton() == 1)
					System.out.println(i + " : " + jetons.get(i).getPile());
				else
					System.out.println(i + " : " + jetons.get(i).getFace());
			}
			nb = -1;
			System.out.println("Tapez de 0 a 2 pour choisir le jeton action a piocher");
			while (nb != 0 && nb != 1 && nb != 2) {
				nb = scanner.nextInt();
				if (nb != 0 && nb != 1 && nb != 2)
					System.out.println("Veuillez retaper :");
			}
			jetons.get(nb).actionjeton(plateau);
			jetons.remove(jetons.get(nb));

			System.out.println("C'est au tour de " +  players.get(numeroJoueur)
                                        + ", voici les jetons actions :");
                        for (int i = 0 ; i < 2 ; i++) {
                                if (jetons.get(i).getPositionjeton() == 1)
                                        System.out.println(i + " : " + jetons.get(i).getPile());
                                else
                                        System.out.println(i + " : " + jetons.get(i).getFace());
                        }
			nb = -1;
			System.out.println("Tapez de 0 a 1 pour choisir le jeton action a piocher");
			while (nb != 0 && nb != 1) {
				nb = scanner.nextInt();
				if (nb != 0 && nb != 1)
					System.out.println("Veuillez retaper :");
			}
			jetons.get(nb).actionjeton(plateau);
			
			jetons.remove(jetons.get(nb));

			if (numeroJoueur==0 ) 
				numeroJoueur=1;
			else 
				numeroJoueur=0;
			System.out.println("C'est au tour de " +players. get(numeroJoueur)
                                        + ", voici le jetons action restant :");
			if (jetons.get(0).getPositionjeton() == 1)
                        	System.out.println(0 + " : " + jetons.get(0).getPile());
                        else
                        	System.out.println(0 + " : " + jetons.get(0).getFace());
			jetons.get(nb).actionjeton(plateau);
                        
            jetons.remove(jetons.get(0));

            appelATemoin(plateau);// methode decrite plus tard 
			
			if (gameEnds(plateau, nbTour) == true)
				break;
			plateau.changeTour();
		}
		
		
	
		
		
		
		 		
}
	public static void appelATemoin(Plateau plateau) {
		ArrayList<Integer> quartierVisible = new ArrayList<Integer>();
		ArrayList<Integer> quartierInVisible = new ArrayList<Integer>();
		int j = 0;
		int index;

		for (int i = 0 ; i < 9 ; i++) {
			if (quartierIsVisible(plateau, i / 3, i % 3))
				quartierVisible.add(i);
			else
				quartierInVisible.add(i);
		}
		System.out.println(quartierVisible); //
		System.out.println(quartierInVisible); //
		System.out.println(plateau.getNbreCase0()); //
		plateau.mrJack.displayIdentiteMrJack(); //afficher l identite de mr Jack
		if (!returnVisible(plateau, quartierVisible)) {
			for (int i = 0 ; i < quartierVisible.size() ; i++) {
				index = quartierVisible.get(i);
				if (plateau.district[index / 3][index % 3].getPileFace() == 0) {
					plateau.district[index / 3][index % 3].setPileFace(1);
					if (plateau.district[index / 3][index % 3].getPerso().getNom() == "Gris") {
						plateau.district[index / 3][index % 3].setPileFace(-1);
						plateau.district[index / 3][index % 3].setOrientation(-1);
					}
					j++;
				}
			}
			plateau.mrJack.setNbSabliers(plateau.mrJack.getNbSabliers() + 1);
			plateau.setNbreCase0(plateau.getNbreCase0() - j);
		}
		else {
			for (int i = 0 ; i < quartierInVisible.size() ; i++) {
				index = quartierInVisible.get(i);
				if (plateau.district[index / 3][index % 3].getPileFace() == 0) {
					plateau.district[index / 3][index % 3].setPileFace(1);
					if (plateau.district[index / 3][index % 3].getPerso().getNom() == "Gris") {
						plateau.district[index / 3][index % 3].setPileFace(-1);
						plateau.district[index / 3][index % 3].setOrientation(-1);
					}
					j++;
				}
			}
			plateau.setNbreCase0(plateau.getNbreCase0() - j);
		}
	}

	public static boolean quartierIsVisible(Plateau plateau, int i, int j) {
		for (int or = 0 ; or < 4 ; or++) {
			int j2 = j;
			int i2 = i;
			if (plateau.district[i][j].getOrientation() == or) ;
			else if (or == 0) {
				i2--;
				while (i2 >= 0) {
					if (plateau.district[i2][j2].getOrientation() == 0
							|| plateau.district[i2][j2].getOrientation() == 2)
						i2 = -10;
					i2--;
				}
				i2++;
				if (isDetective(plateau, i2, j2, or) && i2 != -10)
					return (true);
			}
			else if (or == 1) {
				j2++;
				while (j2 <= 2) {
					if (plateau.district[i2][j2].getOrientation() == 1
							|| plateau.district[i2][j2].getOrientation() == 3)
						j2 = 10;
					j2++;
				}
				j2--;
				if (isDetective(plateau, i2, j2, or) && j2 != 10)
					return (true);
			}
			else if (or == 2) {
				i2++;
				while (i2 <= 2) {
					if (plateau.district[i2][j2].getOrientation() == 0
							|| plateau.district[i2][j2].getOrientation() == 2)
						i2 = 10;
					i2++;
				}
				i2--;
				if (isDetective(plateau, i2, j2, or) && i2 != 10)
					return (true);
			}
			else {
				j2--;
				while (j2 >= 0) {
					if (plateau.district[i2][j2].getOrientation() == 1
							|| plateau.district[i2][j2].getOrientation() == 3)
						j2 = -10;
					j2--;
				}
				j2++;
				if (isDetective(plateau, i2, j2, or) && j2 != -10)
					return (true);
			}
		}
		return (false);
	}

	public static boolean isDetective(Plateau plateau, int i, int j, int or) {
		if (i == 0 && j == 0 && or == 0)
			return (posDetective(plateau, 0));
		else if (i == 0 && j == 0 && or == 3)
			return (posDetective(plateau, 11));
		else if (i == 0 && j == 1)
			return (posDetective(plateau, 1));
		else if (i == 0 && j == 2 && or == 0)
			return (posDetective(plateau, 2));
		else if (i == 0 && j == 2 && or == 1)
			return (posDetective(plateau, 3));
		else if (i == 1 && j == 0)
			return (posDetective(plateau, 10));
		else if (i == 1 && j == 2)
			return (posDetective(plateau, 4));
		else if (i == 2 && j == 0 && or == 3)
			return (posDetective(plateau, 9));
		else if (i == 2 && j == 0 && or == 2)
			return (posDetective(plateau, 8));
		else if (i == 2 && j == 1)
			return (posDetective(plateau, 7));
		else if (i == 2 && j == 2 && or == 1)
			return (posDetective(plateau, 5));
		else if (i == 2 && j == 2 && or == 2)
			return (posDetective(plateau, 6));
		return (false);
	}

	public static boolean posDetective(Plateau plateau, int positionDet) {// verifie si aucun des detectives est dans une position bien precise sur la matrice 
		if (plateau.detective.get(0).getPosition() == positionDet
				|| plateau.detective.get(1).getPosition() == positionDet
				|| plateau.detective.get(2).getPosition() == positionDet)
			return (true);
		return (false);
	}

	public static boolean returnVisible(Plateau plateau, ArrayList<Integer> quartierV) {
		for (int i = 0 ; i < quartierV.size() ; i++) {
			if (plateau.district[quartierV.get(i) / 3][quartierV.get(i) % 3].getPerso()
					== plateau.mrJack.getPersonnagePlateau())
				return (true);
		}
		return (false);
	}

	public static boolean gameEnds(Plateau plateau, int nbTour) {
		// 8eme tour et il y a + de 1 quartier visible -> MrJack
		if (nbTour >= 8 && plateau.getNbreCase0() > 1) {
			System.out.println("MrJack gagne car nous sommes au 8eme tour et que les detectives ne l'ont pas trouve");
			return (true);
		}
		// 8eme tour et il y a 1 quartier visible mais pas par un des detectives + 6 sabliers -> MrJack
		else if (nbTour >= 8 && plateau.getNbreCase0() <= 1 && plateau.mrJack.getNbSabliers() >= 6
				&& !mechantSee(plateau)) {
			System.out.println("MrJack gagne car nous sommes au 8eme tour et que les detectives ne l'ont pas trouve");
			return (true);
		}
		// 6 sablier et + de 1 quartier visible -> MrJack
		else if (plateau.getNbreCase0() > 1 && plateau.mrJack.getNbSabliers() >= 6) {
			System.out.println("MrJack gagne car il possede plus de 6 sabliers");
			return (true);
		}
		// Plus que 1 quartier visible (par forcement par les detectives) + moins de 6 sabliers -> Detective
		else if (plateau.getNbreCase0() <= 1 && plateau.mrJack.getNbSabliers() < 6) {
			System.out.println("Le detective gagne car il ne reste qu'un quartier et que MrJack ne possede pas 6 sabliers");
			return (true);
		}
		return (false);
	}

	public static boolean mechantSee(Plateau plateau) {
		int i2 = 0;
		int j2 = 0;

		for (int i = 0 ; i < 3 ; i++) {
			for (int j = 0 ; j < 3 ; j++) {
				if (plateau.district[i][j].getPerso() == plateau.mrJack.getPersonnagePlateau()){
					i2 = i;
					j2 = j;
				}
			}
		}
		if (quartierIsVisible(plateau, i2, j2))
			return (true);
		return (false);
	}



/// fonctions pour les jetons 
	public static void changerPositonjeton(Jeton jetony) {
		if (jetony.getPositionjeton()==0) {
			jetony.setPositionjeton(1);
				
		}
		else {
			jetony.setPositionjeton(0);
		}
	}
	public static void changerjetons(ArrayList<Jeton> jetons) {//on change les jetons au bout de chaque play 
		for (int i=0 ; i<jetons.size();i++  ) {
			 changerPositonjeton(jetons.get(i));
		 }
		
	}
	
	public static void randomPositionJetons(Jeton jetonx  ){// donne randomly les faces jetons 
		jetonx.setPositionjeton((int)(Math.random() * 2) + 1);
		
	}
	
	 private static void lancerJetons(ArrayList<Jeton> jetons) {/// take all jeton and then gives them randomly pile or face ,appeler dans le tour impair de detective 
		 for (int i=0 ; i<jetons.size();i++  ) {
			 randomPositionJetons(jetons.get(i));
		 }
	 }
	
}
